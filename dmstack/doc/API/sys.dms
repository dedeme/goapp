// Copyright 25-Jul-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// System procedures.

() init =>
/// s -> -
///
/// Set values for 'sys.uname', 'sys.udir', 'sys.locale' and 'sys.home'.
/// It creates the 'sys.home' directory if it does not exist.
/// Initialize sequence for random numbers.
/// If dir is an empty string, throws a "Sys error".
///   dir: Relative path of application home directory.
///        The 'home' directory is formed 'sys.udir'/.dmStackApp/'s'.

() init? =>
/// - -> b
///
/// Returns 'true' if 'sys' was initialized.

() uname =>
/// - -> s
///
/// Returns user name. If 'sys.init' has not previously been called, it
/// returns "".

() udir =>
/// - -> s
///
/// Returns user directory. If 'sys.init' has not previously been called,
/// it returns "".

() locale =>
/// - -> s
///
/// Returns system locale. If 'sys.init' has not previously been called,
/// it returns "".

() home =>
/// - -> s
///
/// Returns application home directory. If 'sys.init' has not previously been
/// called, it returns "".

() args =>
/// - -> l
///
/// Returns a list of String with argumentes of program.
/// 'args !0' is the program name.

() cmd =>
/// l -> ss
///
/// Execute a command with 'l' arguments and returns the stdout and stderror
/// of the corresponding process.
///
/// Examples:
///   ["ls"] sys.cmd pop puts
///   ["ls", "-a"] sys.cmd pop puts
///
/// But is an error: '["ls -a"] sys.cmd pop puts'.
///
///   l       : List of String. 'l !0' is the command name.
///             Strings of 'l' can not contain blanks.
///   --------
///   stdOut  : Stdout of the process.
///   stdError: Stderror of the process.

() sleep =>
/// i -> -
///
/// Stop the current thread 'n' milliseconds.
///   n: Milliseconds.

() freeThread =>
/// p -> -
///
/// Executes 'proc' in an independent thread.
///   p: Procdure.

() thread =>
/// p -> <.= Thread.>
///
/// Executes 'proc' in an independent thread and returns a handle to wait
/// for its ending.
/// This procedure is called in combination with 'sys.join'.
///
///   - Example:
///
///   (5 (pop; "Thread" puts) for) sys.thread : th =
///   "Waiting..." puts
///   th sys.join
///   "Finished" puts
///   p: Procedure.

() join =>
/// <.= Thread.> -> -
///
/// Waits until the procedure linked to 'thread' finishes. See 'sys.thread'.
///   thread: Link retrieved with 'sys.thread'.

() print =>
/// s -> -
///
/// Print tx in stdout.
///   tx: Text to print.

() println =>
/// s -> -
///
/// Print tx in stdout adding a carriage return.
///   tx: Text to print.

() error =>
/// s -> -
///
/// Print tx in stderr.
///   tx: Text to print.

() getLine =>
/// - -> s
///
/// Reads a line from stdin until a carriage return is typed.
/// If there is an error, returns "".

() getText =>
/// - -> s
///
/// Reads a line from stdin until 'tx' + carriage return is typed.
/// 'tx' + CR at the end is removed.
/// If there is an error, returns "".

() getPass =>
/// - -> s
///
/// Reads a line from stdin, witout show echo, until a carriage return is typed.
/// If there is an error, returns "".
