// Copyright 02-Aug-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Float procedures.

() fromStr =>
/// s -> f
///
/// Returns the float value of 's'. If it fails, throws a "Float error".
///   s: String which represent a floating number.

() == =>
/// fff -> b
///
/// Returns 'true' if n2 <= n1 + gap and n2 >= n1 - gap. If gap < 0 returns
/// a "Float error".
///   n1 : A number to compare.
///   n1 : Another number to compare.
///   gap: Admissible difference to equality.

() != =>
/// fff -> b
///
/// Returns 'false' if n2 <= n1 + gap and n2 >= n1 - gap. If gap < 0 returns
/// a "Float error".
///   n1 : A number to compare.
///   n1 : Another number to compare.
///   gap: Admissible difference to equality.

() abs =>
/// f -> f
///
/// Returns the absolute value of 'f'.
///   f: A floating number.

() rnd =>
/// - -> f
///
/// Returns a randon Float between 0 (inclusive) and 1 (exclusive)

() max =>
/// - -> f
///
/// Returns the maximum Float.

() min =>
/// - -> f
///
/// Returns the minimum Float.

() toInt =>
/// f -> i
///
/// Returns 'n' converted to Int.
///   n: A number.

() toIso =>
/// f -> s
///
/// Returns 'n' converted to string with ',' as decimal separator and '.' as
/// thousands separator. If 'scale' is out of [0-9) throws a "Float error".
///   n: A number.
///   scale: Decimals positions [0-9)

() toEn =>
/// f -> s
///
/// Returns 'n' converted to string with '.' as decimal separator and ',' as
/// thousands separator. If 'scale' is out of [0-9) throws a "Float error".
///   n: A number.
///   scale: Decimals positions [0-9)
