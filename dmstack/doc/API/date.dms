// Copyright 28-Sep-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Date-time procedures.

() : new =
/// iii -> <=Date>
///
/// Creates a new date.
///
/// It uses as values: For hours: 12; for minutes, seconds and milliseconds: 0.
///   d: Day (1 to 31). If it is out of range, date rolls to the corresponding
///      valid date.
///   m: Month (1 to 12). If it is out of range, date rolls to the corresponding
///      valid date.
///   y: Year with four digits.

() : newTime =
/// iiiiiii -> <=Date>
///
/// Creates a new date.
///   d : Day (1 to 31). If it is out of range, date rolls to the corresponding
///       valid date.
///   m : Month (1 to 12). If it is out of range, date rolls to the
///       corresponding valid date.
///   y : Year with four digits.
///   h : Hour
///   mn: Minute
///   s : Second
///   ml: Millisecond

() : now =
/// - -> <=Date>
///
/// Creates a new date with the current moment.

() : from =
/// s -> <=Date>
///
/// Returns a data in format YYYYMMDD. If it fails, throws a "Date error".
///   s: A String with a data in format YYYYMMDD.

() : fromIso =
/// s -> <=Date>
///
/// Returns a data in format DD/MM/YYYY. If it fails, throws a "Date error".
///   s: A String with a data in format DD/MM/YYYY.

() : fromEn =
/// s -> <=Date>
///
/// Returns a data in format MM/DD/YYYY. If it fails, throws a "Date error".
///   s: A String with a data in format MM/DD/YYYY.

() : fromFormat =
/// ss -> <=Date>
///
/// Returns a data from a string in format 'fmt'. If it fails, throws a
/// "Date error".
///   s: A String with a data if a valid format.
///   t: Template defining format. See 'date.format'.

() : format =
/// <=Date>s -> s
///
/// Returns a string with a date formatted with 't'.
///
/// Example:
///   2021 02 18 date.new "%D-%M-%Y(%T)"
///     date.format "18-02-2021(12:00:00.000)" expect
///
///   d: Date.
///   t: Template with the following replacements:
///      - %d  Day in number 06 -> 6.
///      - %D  Day with tow digits 06 -> 06.
///      - %m  Month in number 03 -> 3.
///      - %M  Month with two digits 03 -> 03.
///      - %y  Year with two digits 2010 -> 10.
///      - %Y  Year with four digits 2010 -> 2010.
///      - %t  Time without milliseconds -> 15:03:55
///      - %T  Time with milliseconds -> 15:03:55.345
///      - %%  The sign '%'.

() : toIso =
/// <=Date> -> s
///
/// Returns a string with a date formatted as "DD/MM/YYYY".
///   d: Date.
() : toEn =
/// <=Date> -> s
///
/// Returns a string with a date formatted as "MM/DD/YYYY".
///   d: Date.

() : to =
/// <=Date> -> s
///
/// Returns a string with a date formatted as "YYYYMMDD".
///   d: Date.

() : year =
/// <=Date> -> i
///
/// Returns the year of 'd'.
///   d: Date.

() : month =
/// <=Date> -> i
///
/// Returns the month of 'd' (range 1-12).
///   d: Date.

() : day =
/// <=Date> -> i
///
/// Returns the day of 'd' (range 1-31).
///   d: Date.

() : hour =
/// <=Date> -> i
///
/// Returns the hour of 'd'.
///   d: Date.

() : min =
/// <=Date> -> i
///
/// Returns the minute of 'd'.
///   d: Date.

() : sec =
/// <=Date> -> i
///
/// Returns the second of 'd'.
///   d: Date.

() : millis =
/// <=Date> -> i
///
/// Returns the millisecond of 'd' (range 0-999).
///   d: Date.

() : week =
/// <=Date> -> ii
///
/// Returns the number of week (range 1-53) and the year of 'd'.
///
/// NOTE:
///   - Jan 01 to Jan 03 of year n might belong to week 52 or 53 of year n-1,
///     and Dec 29 to Dec 31 might belong to week 1 of year n+1
///
/// Example:
///   2021 02 18 date.new : date.week : 2021 expect : 7 expect
///
///   d: Date.
///   --
///   w: Number of week (range 1-53).
///   y: Year.

() : weekday =
/// <=Date> -> i
///
/// Returns the year of 'd' (0->Sunday ... 6->Saturday).
///   d: Date.

() : add =
/// <=Date>i -> <=Date>
///
/// Adds 'n' days to 'd'.
///   d: Date.
///   n: Days to add (it can be negative)

() : addSec =
/// <=Date>i -> <=Date>
///
/// Adds 'n' seconds to 'd'.
///   d: Date.
///   n: Seconds to add (it can be negative)

() : addMillis =
/// <=Date>i -> <=Date>
///
/// Adds 'n' milliseconds to 'd'.
///   d: Date.
///   n: Milliseconds to add (it can be negative)

() : df =
/// <=Date><=Date> -> i
///
/// Returns d1 - d2 in days
///   d1: A date.
///   d2: Another date.

() : dfTime =
/// <=Date><=Date> -> i
///
/// Returns d1 - d2 in milliseconds
///   d1: A date.
///   d2: Another date.

() : cmp =
/// <=Date><=Date> -> i
///
/// Returns d1 - d2 in days
///   d1: A date.
///   d2: Another date.

() : cmpTime =
/// <=Date><=Date> -> i
///
/// Returns d1 - d2 in days
///   d1: A date.
///   d2: Another date.

() : eq =
/// <=Date><=Date> -> b
///
/// Returns d1 - d2 in days
///   d1: A date.
///   d2: Another date.

() : eqTime =
/// <=Date><=Date> -> b
///
/// Returns d1 - d2 in milliseconds
///   d1: A date.
///   d2: Another date.
