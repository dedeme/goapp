// Copyright 26-Jul-2020 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// String procedures.
///
/// Some procedures use 'runes' to indicate UTF-8 codes. Operations with
/// them are slower than opreations with bytes.

() : fromIso =
/// s -> s
///
/// Creates an UTF-8 string for an ISO string.
///   s: An ISO string

() : cmp =
/// ss -> i
///
/// Returns 1, 0 or -1, according to if 's1' is >, == or < than 's2'. Strings
/// are compared in locale.
///   s1: A string.
///   s2: Another string.

() : eq =
/// ss -> b
///
/// Returns 'true' if 's1' == 's2'. Strings are compared in locale.
///   s1: A string.
///   s2: Another string.

() : neq =
/// ss -> b
///
/// Returns 'true' if 's1' != 's2'. Strings are compared in locale.
///   s1: A string.
///   s2: Another string.

() : gt =
/// ss -> b
///
/// Returns 'true' if 's1' > 's2'. Strings are compared in locale.
///   s1: A string.
///   s2: Another string.

() : ge =
/// ss -> b
///
/// Returns 'true' if 's1' >= 's2'. Strings are compared in locale.
///   s1: A string.
///   s2: Another string.

() : lt =
/// ss -> b
///
/// Returns 'true' if 's1' == 's2'. Strings are compared in locale.
///   s1: A string.
///   s2: Another string.

() : le =
/// ss -> b
///
/// Returns 'true' if 's1' == 's2'. Strings are compared in locale.
///   s1: A string.
///   s2: Another string.

() : starts =
/// ss -> b
///
/// Returns 'true' if 's' starts with 'sub'.
///   s  : Container string.
///   sub: Substring to search.

() : ends =
/// ss -> b
///
/// Returns 'true' if 's' ends with 'sub'.
///   s  : Container string.
///   sub: Substring to search.

() : len =
/// s -> i
///
/// Returns the number of bytes of 's' (e.g. "año" str.len -> 4). See
/// 'str.runesLen'.
///   s: A string.

() : runesLen =
/// s -> i
///
/// Returns the number of runes of 's' (e.g. "año" str.len -> 3). See
/// 'str.len'. Throws a "Str error" if 's' is a bad 'UTF8' string.
///   s: A string.

() : get =
/// si -> s
///
/// Returns the byte in position 'ix' (e.g. "año" 3 str.get -> "o" [ñ occupies
/// 2 bytes]). See 'str.getRune'.
/// Throws "Index out of range error".
///   s : A string.
///   ix: Position 0-based index.

() : getRune =
/// si -> s
///
/// Returns the rune in position 'ix' (e.g. "año" 2 str.get -> "o"). See
/// 'str.get'.
/// Throws "Index out of range error".
/// Throws a "Str error" if 's' is a bad 'UTF8' string.
///   s : A string.
///   ix: Position 0-based index.

() : rune =
/// s -> i
///
/// Returns the rune code of the first rune of 's'. Throws "Str error" if 's'
/// is empty or not a valid 'UTF8' string.
///   s: A non empty string.

() : fromRune =
/// i -> s
///
/// Returns the rune which corresponds to 'rn'.
///   rn: Rune code.

() : each =
/// sp -> -
///
/// Executes 'p' passing it successively runes of 's' as strings.
///
/// - Example:
///
///   "" list.ref : s =
///   "z3f" (ch =; s (ch +) ^^) str.each
///   s >> "z3f" expect
///
///   s: A string.
///   p: Procedure type 's -> -'

() : index =
/// ss -> i
///
/// Returns 0-based index of the first occurrence of 'sub' in 's', or -1 if
/// 'sub' is not found.
///   s  : A string.
///   sub: A substring to find.

() : indexFrom =
/// ssi -> i
///
/// Returns 0-based index of the first occurrence of 'sub' in 's' from 'ix', or
/// -1 if 'sub' is not found (e.g. "abcdc" "c" 3 str.indexFrom -> 4).
/// It throws a "Index out of range error".
///   s  : A string.
///   sub: A substring to find.
///   ix : 0-based index (inclusive) to start searching.

() : lastIndex =
/// ss -> i
///
/// Returns 0-based index of the last occurrence of 'sub' in 's', or -1 if
/// 'sub' is not found.
///   s  : A string.
///   sub: A substring to find.

() : replace =
/// sss -> s
///
/// Returns a new string with every occurrence of 'old' replaced by 'new' in
/// 's'.
///   s  : String to repace.
///   old: Old substring.
///   new: New substring.

() : join =
/// ls -> s
///
/// Returns a string joining elements of list with 'sep'.
///   l  : List of strings.
///   sep: Separator to join the strings of 'l'.

() : split =
/// ss -> l
///
/// Splits 's' using 'sep'.
///
/// - Examples:
///   "" "" str.split [] expect
///   "a" "" str.split ["a"] expect
///   "a" ";" str.split ["a"] expect
///   ";a" ";" str.split ["", "a"] expect
///   "a;" ";" str.split ["a", ""] expect
///   "caña" "" str.split ["c", "a", "ñ", "a"] expect
///   "ca;ñ;a" ";" str.split ["ca", "ñ", "a"] expect
///
///   s  : String to split.
///   sep: Separator.

() : splitTrim =
/// ss -> l
///
/// Splits 's' using 'sep' and 'trimming' results.
///
/// - Examples:
///   "  " "" str.splitTrim ["", ""] expect
///   " a " "" str.splitTrim ["", "a", ""] expect
///   "  a  " ";" str.splitTrim ["a"] expect
///   "   ;  a  " ";" str.splitTrim ["", "a"] expect
///   "  a ; " ";" str.splitTrim ["a", ""] expect
///   " caña " "" str.splitTrim ["", "c", "a", "ñ", "a", ""] expect
///   " ca; ñ ;a " ";" str.splitTrim ["ca", "ñ", "a"] expect
///
///   s  : String to split.
///   sep: Separator.

() : trim =
/// s -> s
///
/// Returns a new string removing spaces at the beginning and at the end of
/// 's'.
///   s: String to 'trimming'.

() : ltrim =
/// s -> s
///
/// Returns a new string removing spaces at the beginning of 's'.
///   s: String to 'trimming'.

() : rtrim =
/// s -> s
///
/// Returns a new string removing spaces at the end of 's'.
///   s: String to 'trimming'.

() : toUpper =
/// s -> s
///
/// Returns a new string with every rune in uppercase.
///   s: String to modify.

() : toLower =
/// s -> s
///
/// Returns a new string with every rune in lowercase.
///   s: String to modify.

() : digits =
/// s -> b
///
/// Returns 'true' if every rune of 's' is a digit (0-9). If 's' is empty,
/// also returns 'true'.
///   s: String to evaluate.

() : number =
/// s -> b
///
/// Returns 'true' if 's' represents a number (float) in decimal notation.
/// If 's' is empty, returns 'false'.
///   s: String to evaluate.

() : regularizeIso =
/// s -> s
///
/// Returns 's' replacing '.' by '' and ',' by '.'.
///   s: String to modify.

() : regularizeEn =
/// s -> s
///
/// Returns 's' replacing ',' by ''.
///   s: String to modify.

() : sub =
/// sii -> s
///
/// Returns a substring of 's' from 'begin' (inclusive) to 'end' (exclusive). If
/// 'begin' or 'end' are less than 0, its value is recalculate as
/// 'len(s) + value'.
/// If 'end' <= 'begin' an empty string is returned.
/// Calculus is made with bytes.
/// It throws a "Index out of range error".
///   s    : A string.
///   begin: Index to start.
///   end  : Index to end.

() : left =
/// si -> s
///
/// Equals to '0 end str.sub'
///   s    : A string.
///   end  : Index to end.

() : right =
/// si -> s
///
/// Equals to 'begin : s str.len : str.sub'
///   s    : A string.
///   begin: Index to start.


