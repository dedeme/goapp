// Copyright 10-Aug-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Iterator procedures.

() new =>
/// *p -> <=Iterator>
///
/// Creates a new iterator.
///   next: Function (- -> *b) that returns next element of iterator and 'true'
///         or an indetermined value and 'false' if there are not more elements.

() empty =>
/// - -> <=Iterator>
///
/// Returns an iterator without elements.

() unary =>
/// * -> <=Iterator>
///
/// Returns an interator whose unique element is 'e'.
///   e: Element to include in the iterator.

() from =>
/// l -> <=Iterator>
///
/// Creates Iterator from List.
///   l -> A list.

() range =>
/// ii -> <=Iterator>
///
/// Returns an iterator of integers from begin (inclusive) to end (exclusive)
///   begin: Start of numbers.
///   end  : End of numbers.

() range0 =>
/// i -> <=Iterator>
///
/// Returns an iterator of integers from 0 (inclusive) to end (exclusive)
///   end: End of numbers.

() runes =>
/// s -> <=Iterator>
///
/// Returns an iterator with the runes of 's'.
/// Throws "Str error" if 's' is not a valid 'UTF8' string.
///   s: A string.

() has =>
/// <=Iterator> -> b
///
/// Returns 'true' if 'i' has more elements.
///   i: An iterator.

() peek =>
/// <=Iterator> -> *
///
/// Returns the current element of 'i', but does not advance to the next one.
///   i: An iterator.

() next =>
/// <=Iterator> -> *
///
/// Returns the current element of 'i' and advances to the next one.
///   i: An iterator.

() + =>
/// <=Iterator><=Iterator> -> <=Iterator>
///
/// Returns an iterator joining i2 after i1.
///   i1: An iterator.
///   i2: Another iterator.

() ++ =>
/// l -> <=Iterator>
///
/// Returns an interator joining iteratos in 'ls'.
///   ls: A list of iterators.

() drop =>
/// <=Iterator>i -> <=Iterator>
///
/// Returns an iterator with the elements of 'i' after the 'n' one (if n <= 0
/// returns all the elements). If 'n > (i it.count)', it returns an empty
/// iterator.
///   i: An iterator.
///   n: Elments to skip.

() dropf =>
/// <=Iterator>p -> <=Iterator>
///
/// Returns an iterator with the elements of 'i' after the firts ones which
/// accomplish 'pr'.
///   i : An iterator.
///   pr: Procedure (* -> b) to test elements of 'i'.

() filter =>
/// <=Iterator>p -> <=Iterator>
///
/// Returns an iterator with the elements of 'i' after which accomplish 'pr'.
///   i : An iterator.
///   pr: Procedure (* -> b) to test every element of 'i'.

() map =>
/// <=Iterator>p -> <=Iterator>
///
/// Returns an iterator with results of apply 'pr' to each element of 'i'.
///   i : An iterator.
///   pr: Procedure (* -> *) to transform elements of 'i'.

() push =>
/// <=Iterator>* -> <=Iterator>
///
/// Adds an element at the end of 'i' in a new iterator.
///   i: An iterator.
///   e: An element.

() push0 =>
/// <=Iterator>* -> <=Iterator>
///
/// Adds an element at the end of 'i' in a new iterator.
///   i: An iterator.
///   e: An element.

() take =>
/// <=Iterator>i -> <=Iterator>
///
/// Returns an iterator with the first 'n' elements of 'i' (if n <= 0 returns
/// an empty iterator). If 'n > (i it.count)', it returns all the elements of
/// 'i'.
///   i: An iterator.
///   n: Elments to skip.

() takef =>
/// <=Iterator>p -> <=Iterator>
///
/// Returns an iterator with the first elements of 'i' which accomplish 'pr'.
///   i : An iterator.
///   pr: Procedure (* -> b) to test elements of 'i'.

() zip =>
/// <=Iterator><=Iterator> -> <=Iterator>
///
/// Returns an iterator with pairs of elements from i1 and i2. The length of
/// the resulting iterator is the least of both.
///   i1: An iterator.
///   i2: Another iterator.

() zip3 =>
/// <=Iterator><=Iterator><=Iterator> -> <=Iterator>
///
/// Returns an iterator with triples of elements from i1, i2 and i2. The length
/// of the resulting iterator is the least of all of them.
///   i1: An iterator.
///   i2: Another iterator.
///   i3: Another iterator.

() all? =>
/// <=Iterator>p -> b
///
/// Returns 'true' if each element of 'i' returns 'true' with 'pr'.
///   i : An iterator.
///   pr: Procedure (* -> b) to test elements of 'i'.

() any? =>
/// <=Iterator>p -> b
///
/// Returns 'true' if any element of 'i' returns 'true' with 'pr'.
///   i : An iterator.
///   pr: Procedure (* -> b) to test elements of 'i'.

() contains? =>
/// <=Iterator>* -> b
///
/// Returns 'true' if 'i' contains 'e' comparing with '=='.
///   i: An iterator.
///   e: Element.

() each =>
/// <=Iterator>p -> -
///
/// Executes 'pr' with each element of 'i'.
///
/// Example:
///   [] l0 =
///   [2, 4] it.from (e =; l0 e 2 * list.push) it.each; l0 [4, 8] expect
///
///   i : An iterator.
///   pr: Procedure (* -> -) to run.

() eachIx =>
/// <=Iterator>p -> -
///
/// Executes 'pr' with each element of 'i' and its index.
///
/// Example:
///   [] l0 =
///   [2, 4] it.from (i =; e =; l0 e i * list.push) it.eachIx; l0 [0, 4] expect
///
///   i : An iterator.
///   pr: Procedure (*i -> -) to run.

() eq? =>
/// <=Iterator><=Iterator>p -> b
///
/// Retruns 'true' if i1 has the same number of elements that i2 and each
/// pair of elements <i1[i], i2[i]> return 'true' with 'pr'.
///   i1: An iterator.
///   i2: Another iterator.
///   pr: Procedure (** -> b) to tests elements.

() neq? =>
/// <=Iterator><=Iterator>p -> b
///
/// Retruns 'eq? !'.
///   i1: An iterator.
///   i2: Another iterator.
///   pr: Procedure (** -> b) to tests elements.

() == =>
/// <=Iterator><=Iterator> -> b
///
/// Retruns 'true' if i1 has the same number of elements that i2 and each
/// pair of elements <i1[i], i2[i]> return 'true' with '=='.
///   i1: An iterator.
///   i2: Another iterator.

() != =>
/// <=Iterator><=Iterator> -> b
///
/// Retruns '== !'.
///   i1: An iterator.
///   i2: Another iterator.

() find =>
/// <=Iterator>p -> *
///
/// Returns a option 'some' with the first element which returns 'true' with
/// 'pr' or a option 'none' if there is not such element.
///   i : An iterator.
///   pr: Procedure (* -> b) to test elements of i.

() index =>
/// <=Iterator>* -> i
///
/// Returns the index of the first element of 'i' equals to 'e' or -1 if such
/// element does not exist.
///   i: An iterator.
///   e: Element to find,

() indexf =>
/// <=Iterator>pr -> i
///
/// Returns the index of the first element of 'i' that returns 'true' with pr
/// or -1 if such element does not exist.
///   i : An iterator.
///   pr: Procedure (* -> b) to test elements of i.

() lastIndex =>
/// <=Iterator>* -> i
///
/// Returns the index of the last element of 'i' equals to 'e' or -1 if such
/// element does not exist.
///   i: An iterator.
///   e: Element to find,

() lastIndexf =>
/// <=Iterator>pr -> i
///
/// Returns the index of the last element of 'i' that returns 'true' with pr
/// or -1 if such element does not exist.
///   i : An iterator.
///   pr: Procedure (* -> b) to test elements of i.

() reduce =>
/// <=Iterator>*pr -> *
///
/// Returns the result of apply 'p' over 'seed' and each element of 'i' in turn.
///
/// Example:
///   [1, 2, 3] it.from 4 (+) it.reduce 10 expect
///
///   i   : An iterator.
///   seed: Object to start application of 'pr'
///   pr  : Procedure (** -> *)(seed, element -> newSeed) modify seed.

() to =>
/// <=Iterator> -> l
///
/// Returns a list with elements of 'i'.
///   i: An iterator.

() reverse =>
/// <=Iterator> -> <=Iterator>
///
/// Returns the elements of i in reverse order.
///
/// NOTE: This procedure creates a list with elements of 'i'.
///   i: An iterator.

() shuffle =>
/// <=Iterator> -> <=Iterator>
///
/// Returns the elements of i in random order.
///
/// NOTE: This procedure creates a list with elements of 'i'.
///   i: An iterator.

() sort =>
/// <=Iterator>p -> <=Iterator>
///
/// Returns the elements of i ordered by 'pr'.
///
/// Examples:
///   [1, 4, 2] it.from (<) it.sort it.to [1, 2, 4] expect
///   [1, 4, 2] it.from (>) it.sort it.to [4, 2, 1] expect
///
/// NOTE: This procedure creates a list with elements of 'i'.
///   i : An iterator.
///   pr: Procedure (** -> b) for sorting.

() box =>
/// l -> <=Iterator>
///
/// Returns an infinite iterator with elements of a list randomly placed in rows
/// such that each row consume all its elements.
///
/// Example:
///   [1, 2, 3] it.box 6 it.take it.to puts
/// That could returns '[3,2,1,3,1,2]'
/// NOTE: This procedure creates a list with elements of 'i'.
///   lst: A list.

() box2 =>
/// l -> <=Iterator>
///
/// Returns a 'it.box' from a list of 'tp' which first element is the number of
/// duplicates and the second is the element to put in list for the 'it.box'.
/// Throws "Box error" if lst is not a valid list.
///
/// Example:
///   [[2, "a"], [3, "b"]] it.box2 8 it.take it.to puts
/// That could returns '["b","a","b","a","b","b","b","a"]'
/// NOTE: This procedure creates a list with elements of 'i'.
///   lst: A list of pairs [i, *].


