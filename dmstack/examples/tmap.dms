// Copyright 10-Jan-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

(
  map.new : M0 =
  M0 map.size 0 expect
  M0 map.keys [] expect
  M0 map.values [] expect
  M0 map.pairs [] expect
  M0 map.to [] expect

  ["one", 1, "two", 2, "three", 3] map.from : M3 =
  M3 map.size 3 expect
  M3 map.keys ("one" ==) arr.any assert
  M3 map.keys ("two" ==) arr.any assert
  M3 map.keys ("three" ==) arr.any assert
  M3 map.values (1 ==) arr.any assert
  M3 map.values (2 ==) arr.any assert
  M3 map.values (3 ==) arr.any assert
  M3 map.pairs (["one", 1] ==) arr.any assert
  M3 map.pairs (["two", 2] ==) arr.any assert
  M3 map.pairs (["three", 3] ==) arr.any assert
  M3 map.to dup ("one" ==) arr.index 1 + arr.get 1 expect
  M3 map.to dup ("two" ==) arr.index 1 + arr.get 2 expect
  M3 map.to dup ("three" ==) arr.index 1 + arr.get 3 expect

  map.new : M =
  M "one" 1 map.put
  M "two" 2 map.put
  M "three" 3 map.put
  M "one" map.get 1 expect
  M "one" map.oget [1] expect
  M "onex" map.oget [] expect
  M..one 1 expect
  M M3 == assert
  M "one" (4 +) map.up; M "one" map.get 5 expect
  M M3 != assert
  M M3 (2 % swap 2 % ==) map.eq assert
  M "one" (1 +) map.up
  M M3 != assert
  M M3 (2 % swap 2 % ==) map.neq assert
  M "one" 1 map.put; M..one 1 expect
  M M3 == assert

  M "one" map.remove
  M "three" map.remove
  M map.size 1 expect
  M ..two 2 expect

  @
) run
