// Copyright 12-Aug-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

(
  [] (==) list.removeDup [] expect
  [1, 2, 3] (==) list.removeDup [1, 2, 3] expect
  [1, 1, 2, 3, 2, 3, 1, 2] (==) list.removeDup [1, 2, 3] expect

  [] (2 ==) list.all? assert
  [2, 2, 2] (2 ==) list.all? assert
  [1, 2, 3] (2 ==) list.all? ! assert
  [1] (2 ==) list.all? ! assert

  [] (2 ==) list.any? ! assert
  [2, 2, 2] (2 ==) list.any? assert
  [1, 2, 3] (2 ==) list.any? assert
  [1] (2 ==) list.any? ! assert

  0 list.ref : sum =
  [] (v =; sum (v +) ^^) list.each; sum >> 0 expect
  [1, 2, 3] (v =; sum (v +) ^^) list.each; sum >> 6 expect

  sum 0 <<
  [] (i =; v =; sum (v i + +) ^^) list.eachIx; sum >> 0 expect
  [1, 2, 3] (i =; v =; sum (v i + +) ^^) list.eachIx; sum >> 9 expect

  [] [] (==) list.eq? assert
  [1, 2] [1] (==) list.eq? ! assert
  [1, 2] [1, 2] (==) list.eq? assert
  [1, 2] [1, 3] (==) list.eq? ! assert

  [] [] (==) list.neq? ! assert
  [1, 2] [1] (==) list.neq? assert
  [1, 2] [1, 2] (==) list.neq? ! assert
  [1, 2] [1, 3] (==) list.neq? assert

  [] (1 ==) list.index -1 expect
  [1, 2, 1, 3] (4 ==) list.index -1 expect
  [1, 2, 1, 3] (1 ==) list.index 0 expect

  [] (3 % 0 ==) list.find [] expect
  [1, 2, 1, 4] (3 % 0 ==) list.find [] expect
  [1, 6, 1, 3] (3 % 0 ==) list.find [6] expect

  [] (1 ==) list.lastIndex -1 expect
  [1, 2, 1, 3] (4 ==) list.lastIndex -1 expect
  [1, 2, 1, 3] (1 ==) list.lastIndex 2 expect

  [] 0 (+) list.reduce 0 expect
  [1, 2, 3] 0 (+) list.reduce 6 expect

  [] list.copy [] expect
  [1, 2] list.copy [1, 2] expect

  [] -1 list.drop [] expect
  [1, 2, 3] -10 list.drop [1, 2, 3] expect
  [1, 2, 3] 1 list.drop [2, 3] expect
  [1, 2, 3] -2 list.drop [2, 3] expect
  [1, 2, 3] 10 list.drop [] expect

  [] (2 <) list.dropf [] expect
  [1, 2, 3] (-1 <) list.dropf [1, 2, 3] expect
  [1, 2, 3, 1] (2 <) list.dropf [2, 3, 1] expect
  [1, 2, 3] (200 <) list.dropf [] expect

  [] (2 <) list.filter [] expect
  [1, 2, 3] (-1 <) list.filter [] expect
  [1, 2, 3, 1] (2 <) list.filter [1, 1] expect
  [1, 2, 3] (200 <) list.filter [1, 2, 3] expect

  [] list.flat [] expect
  [1, 4] list.flat [1, 4] expect
  [1, [2, ["a"], 3], 4] list.flat [1, 2, ["a"], 3, 4] expect

  [] (1 +) list.map [] expect
  [1] (1 +) list.map [2] expect
  [2, 1, 3] (1 +) list.map [3, 2, 4] expect

  [] 0 100 list.sub [] expect
  [1, 2, 3] -10 0 list.sub [] expect
  [1, 2, 3] -10 2 list.sub [1, 2] expect
  [1, 2, 3] -10 -1 list.sub [1, 2] expect
  [1, 2, 3] -10 200 list.sub [1, 2, 3] expect

  [1, 2, 3] 1 0 list.sub [] expect
  [1, 2, 3] 1 2 list.sub [2] expect
  [1, 2, 3] 1 200 list.sub [2, 3] expect

  [] -1 list.take [] expect
  [1, 2, 3] -10 list.take [] expect
  [1, 2, 3] 1 list.take [1] expect
  [1, 2, 3] -2 list.take [1] expect
  [1, 2, 3] 10 list.take [1, 2, 3] expect

  [] (2 <) list.takef [] expect
  [1, 2, 3] (-1 <) list.takef [] expect
  [1, 2, 3, 1] (2 <) list.takef [1] expect
  [1, 2, 3] (200 <) list.takef [1, 2, 3] expect

  [] ["a", "b", "c"] list.zip [] expect
  [1, 2] [] list.zip [] expect
  [1, 2] ["a", "b", "c"] list.zip [[1, "a"], [2, "b"]] expect

  [] [] [true, false, true] list.zip3 [] expect
  [] ["a", "b", "c"] [] list.zip3 [] expect
  [1, 2] [] [] list.zip3 [] expect
  [1, 2] ["a", "b", "c"] [true, false, true] list.zip3
    [[1, "a", true], [2, "b", false]] expect

  [] list.unzip [] expect [] expect
  [[1, "a"], [2, "b"]] list.unzip  ["a", "b"] expect [1, 2] expect

  [] list.unzip3 [] expect [] expect [] expect
  [[1, "a", true], [2, "b", false]] list.unzip3
    [true, false] expect ["a", "b"] expect [1, 2] expect

  @
) run
