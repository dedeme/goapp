// Copyright 21-Sep-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

(
  (3 <) : m3 =
  [] it.from (m3) it.all? assert
  [0, 1, 2] it.from (m3) it.all? assert
  [3, 0, 1, 2] it.from (m3) it.all? ! assert
  [0, 1, 3] it.from (m3) it.all? ! assert
  [0, 3, 1] it.from (m3) it.all? ! assert
  [3, 3, 3] it.from (m3) it.all? ! assert

  [] it.from (m3) it.any? ! assert
  [0, 1, 2] it.from (m3) it.any? assert
  [3, 0, 1, 2] it.from (m3) it.any? assert
  [0, 1, 3] it.from (m3) it.any? assert
  [0, 3, 1] it.from (m3) it.any? assert
  [3, 3, 3] it.from (m3) it.any? ! assert

  [] it.from 3 it.contains? ! assert
  [1, 2, 4] it.from 3 it.contains? ! assert
  [3, 0, 1, 2] it.from 3 it.contains? assert
  [0, 1, 3] it.from 3 it.contains? assert
  [0, 3, 1] it.from 3 it.contains? assert
  [3, 3, 3] it.from 3 it.contains? assert

  0 list.ref : sum =
  [] it.from (e =; sum (e +) ^^) it.each; sum >> 0 expect
  sum 0 <<
  [2, 4] it.from (e =; sum (e +) ^^) it.each; sum >> 6 expect
  [] : l0 =
  [2, 4] it.from (e =; l0 e 2 * list.push) it.each; l0 [4, 8] expect

  sum 0 <<
  [] it.from (i =; e =; sum (i e + +) ^^) it.eachIx; sum >> 0 expect
  sum 0 <<
  [2, 4] it.from (i =; e =; sum (i e + +) ^^) it.eachIx; sum >> 7 expect
  l0 list.clear
  [2, 4] it.from (i =; e =; l0 e i * list.push) it.eachIx; l0 [0, 4] expect

  [] it.from [] it.from (==) it.eq? assert
  [1] it.from [] it.from (==) it.eq? ! assert
  [] it.from [1] it.from (==) it.eq? ! assert
  [1, 2, 3] it.from [] it.from (==) it.eq? ! assert
  [] it.from [1, 2, 3] it.from (==) it.eq? ! assert
  [1] it.from [1] it.from (==) it.eq? assert
  [2] it.from [1] it.from (==) it.eq? ! assert
  [1, 2, 3] it.from [1] it.from (==) it.eq? ! assert
  [1] it.from [1, 2, 3] it.from (==) it.eq? ! assert
  [1, 2, 3] it.from [1, 2, 3] it.from (==) it.eq? assert
  [4, 2, 3] it.from [1, 2, 3] it.from (==) it.eq? ! assert
  [1, 4, 3] it.from [1, 2, 3] it.from (==) it.eq? ! assert
  [1, 2, 4] it.from [1, 2, 3] it.from (==) it.eq? ! assert

  [] it.from [] it.from (==) it.neq? ! assert
  [1] it.from [] it.from (==) it.neq? assert
  [] it.from [1] it.from (==) it.neq? assert
  [1, 2, 3] it.from [] it.from (==) it.neq? assert
  [] it.from [1, 2, 3] it.from (==) it.neq? assert
  [1] it.from [1] it.from (==) it.neq? ! assert
  [2] it.from [1] it.from (==) it.neq? assert
  [1, 2, 3] it.from [1] it.from (==) it.neq? assert
  [1] it.from [1, 2, 3] it.from (==) it.neq? assert
  [1, 2, 3] it.from [1, 2, 3] it.from (==) it.neq? ! assert
  [4, 2, 3] it.from [1, 2, 3] it.from (==) it.neq? assert
  [1, 4, 3] it.from [1, 2, 3] it.from (==) it.neq? assert
  [1, 2, 4] it.from [1, 2, 3] it.from (==) it.neq? assert

  [] it.from [] it.from it.== assert
  [1] it.from [] it.from it.== ! assert
  [] it.from [1] it.from it.== ! assert
  [1, 2, 3] it.from [] it.from it.== ! assert
  [] it.from [1, 2, 3] it.from it.== ! assert
  [1] it.from [1] it.from it.== assert
  [2] it.from [1] it.from it.== ! assert
  [1, 2, 3] it.from [1] it.from it.== ! assert
  [1] it.from [1, 2, 3] it.from it.== ! assert
  [1, 2, 3] it.from [1, 2, 3] it.from it.== assert
  [4, 2, 3] it.from [1, 2, 3] it.from it.== ! assert
  [1, 4, 3] it.from [1, 2, 3] it.from it.== ! assert
  [1, 2, 4] it.from [1, 2, 3] it.from it.== ! assert

  [] it.from [] it.from it.!= ! assert
  [1] it.from [] it.from it.!= assert
  [] it.from [1] it.from it.!= assert
  [1, 2, 3] it.from [] it.from it.!= assert
  [] it.from [1, 2, 3] it.from it.!= assert
  [1] it.from [1] it.from it.!= ! assert
  [2] it.from [1] it.from it.!= assert
  [1, 2, 3] it.from [1] it.from it.!= assert
  [1] it.from [1, 2, 3] it.from it.!= assert
  [1, 2, 3] it.from [1, 2, 3] it.from it.!= ! assert
  [4, 2, 3] it.from [1, 2, 3] it.from it.!= assert
  [1, 4, 3] it.from [1, 2, 3] it.from it.!= assert
  [1, 2, 4] it.from [1, 2, 3] it.from it.!= assert

  [] it.from (2 % 0 ==) it.find [] expect
  [1] it.from (2 % 0 ==) it.find [] expect
  [4] it.from (2 % 0 ==) it.find [4] expect
  [1, 8, 3] it.from (2 % 0 ==) it.find [8] expect
  [4, 1, 8, 3] it.from (2 % 0 ==) it.find [4] expect
  [1, 8, 3, 4] it.from (2 % 0 ==) it.find [8] expect
  [1, 5, 3] it.from (2 % 0 ==) it.find [] expect

  [] it.from 4 it.index -1 expect
  [1] it.from 4 it.index -1 expect
  [4] it.from 4 it.index 0 expect
  [1, 4, 3] it.from 4 it.index 1 expect
  [4, 1, 4, 3] it.from 4 it.index 0 expect
  [1, 8, 3, 4] it.from 4 it.index 3 expect
  [1, 5, 3] it.from 4 it.index -1 expect

  [] it.from (4 ==) it.indexf -1 expect
  [1] it.from (4 ==) it.indexf -1 expect
  [4] it.from (4 ==) it.indexf 0 expect
  [1, 4, 3] it.from (4 ==) it.indexf 1 expect
  [4, 1, 4, 3] it.from (4 ==) it.indexf 0 expect
  [1, 8, 3, 4] it.from (4 ==) it.indexf 3 expect
  [1, 5, 3] it.from (4 ==) it.indexf -1 expect

  [] it.from 4 it.lastIndex -1 expect
  [1] it.from 4 it.lastIndex -1 expect
  [4] it.from 4 it.lastIndex 0 expect
  [1, 4, 3] it.from 4 it.lastIndex 1 expect
  [4, 1, 4, 3] it.from 4 it.lastIndex 2 expect
  [1, 8, 3, 4] it.from 4 it.lastIndex 3 expect
  [1, 5, 3] it.from 4 it.lastIndex -1 expect

  [] it.from (4 ==) it.lastIndexf -1 expect
  [1] it.from (4 ==) it.lastIndexf -1 expect
  [4] it.from (4 ==) it.lastIndexf 0 expect
  [1, 4, 3] it.from (4 ==) it.lastIndexf 1 expect
  [4, 1, 4, 3] it.from (4 ==) it.lastIndexf 2 expect
  [1, 8, 3, 4] it.from (4 ==) it.lastIndexf 3 expect
  [1, 5, 3] it.from (4 ==) it.lastIndexf -1 expect

  [] it.from 4 (+) it.reduce 4 expect
  [1, 2, 3] it.from 4 (+) it.reduce 10 expect

  [] it.from it.reverse it.to [] expect
  [1, 2, 3] it.from it.reverse it.to [3, 2, 1] expect

  [] it.from it.shuffle it.to [] expect
  // [1, 2, 3] it.from it.shuffle it.to puts

  [] it.from (<) it.sort it.to [] expect
  [3, 1, 2] it.from (<) it.sort it.to [1, 2, 3] expect
  [3, 1, 2] it.from (>) it.sort it.to [3, 2, 1] expect

  // [1, 2, 3] it.box 6 it.take it.to puts
  // [[2, "a"], [3, "b"]] it.box2 8 it.take it.to puts

  @
) run
