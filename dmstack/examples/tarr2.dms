// Copyright 10-Jan-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

(
  [] (==) arr.removeDup [] expect
  [1, 2, 3] (==) arr.removeDup [1, 2, 3] expect
  [1, 1, 2, 3, 2, 3, 1, 2] (==) arr.removeDup [1, 2, 3] expect

  [] (2 ==) arr.all assert
  [2, 2, 2] (2 ==) arr.all assert
  [1, 2, 3] (2 ==) arr.all ! assert
  [1] (2 ==) arr.all ! assert

  [] (2 ==) arr.any ! assert
  [2, 2, 2] (2 ==) arr.any assert
  [1, 2, 3] (2 ==) arr.any assert
  [1] (2 ==) arr.any ! assert

  0 arr.ref : sum =
  [] (v =; sum (v +) ^^) arr.each; sum >> 0 expect
  [1, 2, 3] (: v =; sum (v +) ^^) arr.each; sum >> 6 expect

  sum 0 <<
  [] (i =; v =; sum (v i + +) ^^) arr.eachIx; sum >> 0 expect
  [1, 2, 3] (: i v =; sum (v i + +) ^^) arr.eachIx; sum >> 9 expect

  [] [] (==) arr.eq assert
  [1, 2] [1] (==) arr.eq ! assert
  [1, 2] [1, 2] (==) arr.eq assert
  [1, 2] [1, 3] (==) arr.eq ! assert

  [] [] (==) arr.neq ! assert
  [1, 2] [1] (==) arr.neq assert
  [1, 2] [1, 2] (==) arr.neq ! assert
  [1, 2] [1, 3] (==) arr.neq assert

  [] (1 ==) arr.index -1 expect
  [1, 2, 1, 3] (4 ==) arr.index -1 expect
  [1, 2, 1, 3] (1 ==) arr.index 0 expect

  [] (3 % 0 ==) arr.find [] expect
  [1, 2, 1, 4] (3 % 0 ==) arr.find [] expect
  [1, 6, 1, 3] (3 % 0 ==) arr.find [6] expect

  [] (1 ==) arr.lastIndex -1 expect
  [1, 2, 1, 3] (4 ==) arr.lastIndex -1 expect
  [1, 2, 1, 3] (1 ==) arr.lastIndex 2 expect

  [] 0 (+) arr.reduce 0 expect
  [1, 2, 3] 0 (+) arr.reduce 6 expect

  [] arr.copy [] expect
  [1, 2] arr.copy [1, 2] expect

  [] -1 arr.drop [] expect
  [1, 2, 3] -10 arr.drop [1, 2, 3] expect
  [1, 2, 3] 1 arr.drop [2, 3] expect
  [1, 2, 3] -2 arr.drop [2, 3] expect
  [1, 2, 3] 10 arr.drop [] expect

  [] (2 <) arr.dropf [] expect
  [1, 2, 3] (-1 <) arr.dropf [1, 2, 3] expect
  [1, 2, 3, 1] (2 <) arr.dropf [2, 3, 1] expect
  [1, 2, 3] (200 <) arr.dropf [] expect

  [] (2 <) arr.filter [] expect
  [1, 2, 3] (-1 <) arr.filter [] expect
  [1, 2, 3, 1] (2 <) arr.filter [1, 1] expect
  [1, 2, 3] (200 <) arr.filter [1, 2, 3] expect

  [] arr.flat [] expect
  [1, 4] arr.flat [1, 4] expect
  [1, [2, ["a"], 3], 4] arr.flat [1, 2, ["a"], 3, 4] expect

  [] (1 +) arr.map [] expect
  [1] (1 +) arr.map [2] expect
  [2, 1, 3] (1 +) arr.map [3, 2, 4] expect

  [] 0 100 arr.sub [] expect
  [1, 2, 3] -10 0 arr.sub [] expect
  [1, 2, 3] -10 2 arr.sub [1, 2] expect
  [1, 2, 3] -10 -1 arr.sub [1, 2] expect
  [1, 2, 3] -10 200 arr.sub [1, 2, 3] expect

  [1, 2, 3] 1 0 arr.sub [] expect
  [1, 2, 3] 1 2 arr.sub [2] expect
  [1, 2, 3] 1 200 arr.sub [2, 3] expect

  [] -1 arr.take [] expect
  [1, 2, 3] -10 arr.take [] expect
  [1, 2, 3] 1 arr.take [1] expect
  [1, 2, 3] -2 arr.take [1] expect
  [1, 2, 3] 10 arr.take [1, 2, 3] expect

  [] (2 <) arr.takef [] expect
  [1, 2, 3] (-1 <) arr.takef [] expect
  [1, 2, 3, 1] (2 <) arr.takef [1] expect
  [1, 2, 3] (200 <) arr.takef [1, 2, 3] expect

  [] ["a", "b", "c"] arr.zip [] expect
  [1, 2] [] arr.zip [] expect
  [1, 2] ["a", "b", "c"] arr.zip [[1, "a"], [2, "b"]] expect

  [] [] [true, false, true] arr.zip3 [] expect
  [] ["a", "b", "c"] [] arr.zip3 [] expect
  [1, 2] [] [] arr.zip3 [] expect
  [1, 2] ["a", "b", "c"] [true, false, true] arr.zip3
    [[1, "a", true], [2, "b", false]] expect

  [] arr.unzip [] expect [] expect
  [[1, "a"], [2, "b"]] arr.unzip  ["a", "b"] expect [1, 2] expect

  [] arr.unzip3 [] expect [] expect [] expect
  [[1, "a", true], [2, "b", false]] arr.unzip3
    [true, false] expect ["a", "b"] expect [1, 2] expect

  @
) run
