// Copyright 10-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

sys.println("titer ...");

V = [0];
hasNext = \-> return V[0] < 4;;
next = \-> {
  r = V[0];
  V[0] += 1;
  return r;
};
assert iter.toStr(iter.new(hasNext, next)) == "<iterator>[0, 1, 2, 3]";

/*
iter.each([0::5], \i -> sys.println(math.toStr(i)););
iter.each([0:5], \i -> sys.println(math.toStr(i)););
iter.each([5::0], \i -> sys.println(math.toStr(i)););
iter.each([5:0], \i -> sys.println(math.toStr(i)););
*/

assert iter.toStr(iter.mp([0::0], \i -> return i * 2;)) ==
  "<iterator>[]";
assert iter.toStr(iter.mp([0::-5], \i -> return i * 2;)) ==
  "<iterator>[0, -2, -4, -6, -8]";

assert iter.all([0::0], \i -> return i < 3;);
assert iter.all([0::3], \i -> return i < 3;);
assert !iter.all([0::5], \i -> return i < 3;);

assert !iter.any([0::0], \i -> return i < 3;);
assert iter.any([0::3], \i -> return i < 3;);
assert iter.any([0::5], \i -> return i < 3;);

it1 = iter.unary("A");
assert iter.next(it1) == "A";
assert !iter.hasNext(it1);

assert !iter.hasNext(iter.empty());

assert iter.toStr(iter.cat(iter.empty(), iter.empty())) ==
  "<iterator>[]";
assert iter.toStr(iter.cat([0::3], iter.empty())) ==
  "<iterator>[0, 1, 2]";
assert iter.toStr(iter.cat(iter.empty(), [0::3])) ==
  "<iterator>[0, 1, 2]";
assert iter.toStr(iter.cat(iter.unary(-1), [0::3])) ==
  "<iterator>[-1, 0, 1, 2]";
assert iter.toStr(iter.cat([0::3], iter.unary(3))) ==
  "<iterator>[0, 1, 2, 3]";
assert iter.toStr(iter.cat([0::3], [3::5])) == "<iterator>[0, 1, 2, 3, 4]";
assert iter.toStr(iter.cat([0::3], [3::5])) == "<iterator>[0, 1, 2, 3, 4]";
assert iter.toStr(iter.cat([0::3], [3::5])) == "<iterator>[0, 1, 2, 3, 4]";

assert iter.toStr(iter.take(iter.empty(), 2)) == "<iterator>[]";
assert iter.toStr(iter.take(iter.unary("a"), 2)) == "<iterator>[\"a\"]";
assert iter.toStr(iter.take([0::5], 2)) == "<iterator>[0, 1]";
assert iter.toStr(iter.take([0::5], -2)) == "<iterator>[]";

assert iter.toStr(iter.drop(iter.empty(), 2)) == "<iterator>[]";
assert iter.toStr(iter.drop(iter.unary("a"), 2)) == "<iterator>[]";
assert iter.toStr(iter.drop([0::5], 2)) == "<iterator>[2, 3, 4]";
assert iter.toStr(iter.drop([0::5], -2)) == "<iterator>[0, 1, 2, 3, 4]";

assert iter.toStr(iter.takeWhile(iter.empty(), \s -> return s == "a";)) ==
  "<iterator>[]";
assert iter.toStr(iter.takeWhile(iter.unary("a"), \s -> return s == "a";)) ==
  "<iterator>[\"a\"]";
assert iter.toStr(iter.takeWhile([0::5], \i -> return i < 2;)) ==
  "<iterator>[0, 1]";
assert iter.toStr(iter.takeWhile([0::5], \i -> return i > 2;)) ==
  "<iterator>[]";

assert iter.toStr(iter.dropWhile(iter.empty(), \s -> return s == "a";)) ==
  "<iterator>[]";
assert iter.toStr(iter.dropWhile(iter.unary("a"), \s -> return s == "a";)) ==
  "<iterator>[]";
assert iter.toStr(iter.dropWhile([0::5], \i -> return i < 2;)) ==
  "<iterator>[2, 3, 4]";
assert iter.toStr(iter.dropWhile([0::5], \i -> return i > 2;)) ==
  "<iterator>[0, 1, 2, 3, 4]";

assert iter.toStr(iter.filter(iter.empty(), \i -> return i % 2 == 0;)) ==
  "<iterator>[]";
assert iter.toStr(iter.filter([0::5], \i -> return i % 2 == 0;)) ==
  "<iterator>[0, 2, 4]";
assert iter.toStr(iter.filter([0::5], \i -> return i % 2 != 0;)) ==
  "<iterator>[1, 3]";

assert iter.count(iter.empty()) == 0;
assert iter.count([0::124]) == 124;

assert iter.index(iter.empty(), \i -> return i == 3;) == -1;
assert iter.index([0::124], \i -> return i == 3;) == 3;
assert iter.index([0::124], \i -> return i == -100;) == -1;

assert iter.reduce(iter.empty(), 0, \s, i -> return s + i;) == 0;
assert iter.reduce([1::5], 0, \s, i -> return s + i;) == 10;

assert arr.toStr(iter.find(iter.empty(), \i -> return i == 3;)) == "[]";
assert arr.toStr(iter.find([0::124], \i -> return i == 3;)) == "[3]";
assert arr.toStr(iter.find([0::124], \i -> return i == -100;)) == "[]";

sys.println("  finished.");

