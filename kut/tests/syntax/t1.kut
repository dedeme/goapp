// Copyright 01-Feb-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

assert 127 == math.toInt("127");
assert -1345 == math.toInt(-1_345.99);
assert 1.34 == math.toFloat("1.34");
assert 0.23e-2 == 0.0023;
assert "a" == ["a", 1, {}][0];
assert {"a-g": 1, a: -23.5}.a == -23.5;
assert {"a-g": 1, a: -23.5}["a-g"] == 1;
va = "a";
vb = "b";
assert {va}.va == "a";
assert {va, vb}["vb"] == "b";
assert map.size({}) == 0;
// -------------

assert !false;
assert true > false;
assert true >= false;
assert false >= false;
assert false < true;
assert false <= true;
assert false <= false;
assert true == true;
assert false == false;
assert true != false;
assert false != true;
assert "a" + "b" + "3" == "ab3";
assert 1000 + 1500 == 2500;
assert 1.5 + 0.5 == 2.0;
assert ([] + [1])[0] == 1;
assert ([1] + [])[0] == 1;
assert ([1] + [100])[1] == 100;
// -------------

assert -500 == 1500 - 2000;
assert math.eq(2.4 - 2.0, 0.4, 0.00001);
assert 20 * 10 == 200;
assert 1.5 * 3.0 == 4.5;
assert 10 / 3 == 3;
assert math.eq(10.0 / 2.5, 4.00, 0.0001);
assert !math.eq(10.0 / 2.5, 8.00, 0.0001);
// -------------

assert 4 == 4 + 3 / 5;
assert math.eq(4.6, 4.0 + 3.0 / 5.0, 0.0001);
assert 1 == (4 + 3) / 5;
assert math.eq(1.4, (4.0 + 3.0) / 5.0, 0.0001);
assert 4 == 4 - 3 / 5;
assert math.eq(3.4, 4.0 - 3.0 / 5.0, 0.0001);
assert 0 == (4 - 3) / 5;
assert math.eq(0.2, (4.0 - 3.0) / 5.0, 0.0001);
// -------------

assert 19 == 4 + 3 * 5;
assert math.eq(19.0, 4.0 + 3.0 * 5.0, 0.0001);
assert 35 == (4 + 3) * 5;
assert math.eq(35.0, (4.0 + 3.0) * 5.0, 0.0001);
assert -11 == 4 - 3 * 5;
assert math.eq(-11.0, 4.0 - 3.0 * 5.0, 0.0001);
assert (3 - 4) * 5 == -5;
assert math.eq((3.0 - 4.0) * 5.0, -5.0, 0.0001);
// -------------

assert 4 == 5 % 3 + 2;
// -------------

assert !("a" > "b");
assert !("a" >= "b");
assert "a" < "b";
assert !("a" >= "b");
assert !("a" == "b");
assert "a" != "b";
// -------------

assert !(1 > 2);
assert !(1 >= 2);
assert 1 < 2;
assert !(1 >= 2);
assert !(1 == 2);
assert 1 != 2;
// -------------

assert !(1.4 > 2.6);
assert !(1.4 >= 2.6);
assert 1.4 < 2.6;
assert !(1.4 >= 2.6);
assert !(1.4 == 2.6);
assert 1.4 != 2.6;
// -------------

assert true | 3;
assert !(true & false);
assert false | true;
assert !(false & 3);
// -------------

assert "ab" == (3 > 2 ? "a" + "b": 5 + 6);
assert (3 < 2 ? "a" + "b": 5 + 6) == 11;
// -------------

assert "here" == switch (3 + 1) {
  1: 1;
  3: 4000;
  default: "here";
};

assert switch (3 + 1) {
  1: 1;
  4: 4000;
  default: "here";
} == 4000;
// -------------

val = 3;
assert 5 == \-> return 3 + 2;();
assert 3 == \n-> return n + 2;(1);
assert 16 == \n, m-> return n + m + val;(10, 3);

sys.println("t1 test OK");

