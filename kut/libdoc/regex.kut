// Copyright 26-Feb-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Regular expressions.

/// Returns an array with matches of 'rg' in 's'".
///   s : String for searching.
///   rg: Regular expression.
/// Examples:
///   assert arr.toStr(regex.matches("paranormal", "a.")) == '["ar", "an", "al"]';
///   assert arr.toStr(regex.matches("paranormal", "xx")) == "[]";
/// \s, s -> [s...]
matches = \s, rg -> {}

/// Returns the result of replace "rg" by "repl" in "s".
/// 'sub' allows to use templates with '$'.
///   s   : Original string.
///   rg  : Regular expression.
///   repl: Replacement.
/// Examples:
///   assert regex.replace("-ab-axxb-", "a(x*)b", "T") == "-T-T-";
///   assert regex.replace("paranormal", "(a)(.)", "$1") == "paaorma";
///   assert regex.replace("paranormal", "(a)(.)", "$2") == "prnorml";
///   assert regex.replace("paranormal", "(a)(.)", "$3") == "porm";
///   assert regex.replace("paranormal", "(a)(.)", "$1x") == "porm";
///   assert regex.replace("paranormal", "(a)(.)", "${1}x") == "paxaxormax";
///   assert regex.replace("paranormal", "(?P<one>a)(.)", "$one") == "paaorma";
///   assert regex.replace("-ab-axxb-", "a(x*)b", "$1AB") == "---";
///   assert regex.replace("-ab-axxb-", "a(x*)b", "${1}AB") == "-AB-xxAB-";
/// \s, s, s -> s
replace = \s, rg, repl -> {}
