// Copyright 07-Mar-2022 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// String functions.

/// Returns the byte-character in position 'ix', counting in bytes.
/// \s, i -> s
at = \s, ix -> {};

/// Returns 'true' if 's' ends with 'subs'.
/// \s, s -> b
ends = \s, subs -> {};

/// Returns the result of fill 'format' with values of 'values'
/// You can use:
///   '%t': for booleans.
///   '%d': for 'int's.
///   '%f': for floats.
///   '%s': for strings.
/// '%f' has the folowing optional constraints:
///   %'width'.'precision'f
/// Examples:
///   str.fmt("%s, %d, %f", ["abc", 33, 12.5]) == "abc, 33, 12.500000"
///   str.fmt("|%12f|%.3f|%5.1f|", [12.5, 12.5, 12.5]) ==
///     "|   12.500000|12.500| 12.5|"
/// \s, a -> s
fmt = \ format, values -> {};

/// Returns a normal string from a ISO string.
/// \s -> s
fromIso = \s -> {};

/// Returns a string from runes.
/// \[s...] -> s
fromRunes = \Runes -> {};

/// Returns a string from codepoints.
/// \[i...] -> s
fromUtf16 = \Codepoints -> {};

/// Returns position of the first occurence of 'subs' in 's', counting by bytes,
/// or -1 if 'subs' is not in 's'.
/// \s, s -> i
index = \s, subs -> {};

/// Returns position of the first occurence of 'subs' in 's', counting by bytes,
/// and searching from 'ix', or -1 if 'subs' is not in 's'.
/// 'ix' count number of bytes.
/// \s, s, i -> i
indexFrom = \s, subs, ix -> {};

/// Returns position of the last occurence of 'subs' in 's', counting by bytes,
/// or -1 if 'subs' is not in 's'.
/// \s, s -> i
lastIndex = \s, subs -> {};

/// Returns substring between '0' (inclusive) and 'ix' (exclusive), counting
/// by bytes.
/// \s, i -> s
left = \s, ix -> {};

/// Returns length of 's'.
/// \s -> i
len = \s -> {};

/// Returns 's' removing starting spaces.
/// \s -> s
ltrim = \s -> {};

/// Returns 's' replacing all ocurreces of 'old' by 'new'.
/// \s, s, s -> s
replace = \s, old, new -> {};

/// Returns substring between 'ix' (inclusive) and 'str.len(s)' (exclusive),
/// counting by bytes.
/// \s, i -> s
right = \s, ix -> {};

/// Returns 's' removing trailing spaces.
/// \s -> s
rtrim = \s -> {};

/// Returns an array with 's' splitted by 'sep'.
/// Examples:
///   assert arr.size(str.split("", "")) == 0;
///   assert arr.join(str.split("", ""), "") == "";
///   assert arr.size(str.split("a", "")) == 1;
///   assert arr.join(str.split("a", ""), "") == "a";
///   assert arr.size(str.split("añ", "")) == 2;
///   assert arr.join(str.split("añ", ""), "") == "añ";
///   assert arr.size(str.split("", ";")) == 1;
///   assert arr.join(str.split("", ";"), ";") == "";
///   assert arr.size(str.split("ab;cd;", ";")) == 3;
///   assert arr.join(str.split("ab;cd;", ";"), ";") == "ab;cd;";
///   assert arr.size(str.split("ab;cd", ";")) == 2;
///   assert arr.join(str.split("ab;cd", ";"), ";") == "ab;cd";
/// \s -> [s...]
split = \s, sep -> {};

/// Equals to split, triming each strings in the resulting array.
/// \s -> [s...]
spitTrim = \s, sep -> {};

/// Returns 'true' if 's' starts with 'subs'.
/// \s, s -> b
starts = \s, subs -> {};

/// Returns substring between 'begin' (inclusive) and 'end' (exclusive),
/// counting by bytes.
/// \s, i, i -> s
sub = \s, begin, end -> {};

/// Returns 's' with all runes in lowercase.
/// \s -> s
toLower = \s -> {};

/// Returns an array with runes of 's'
/// \s -> [s...]
toRunes = \s -> {};

/// Returns 's' with all runes in uppercase.
/// \s -> s
toUpper = \s -> {};

/// Returns an array with codepoints of 's'
/// \s -> [i...]
toUtf16 = \s -> {};

/// Returns 's' removing starting and trailing spaces.
/// \s -> s
trim = \s -> {};

