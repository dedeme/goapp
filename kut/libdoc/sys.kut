// Copyright 13-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// System functions.

/// Returns arguments of calling 'kut' program.
/// For example:
///
/// [file test.kut]
/// sys.println(sys.args()[0]);
///
/// Callings of 'test.kut';
/// 'kut test abc" -> prints "abc"
/// 'kut test" -> Raise a runtime error.
///
/// \-> [s...]
args = \-> {};

/// Executes command 'c' with parameters 'pars' and returns an array with
/// two strings:
///   - First : Reponse on stdout.
///   - Second: Response on stderror.
/// \s, [s...] -> [s, s]
cmd = \c, pars -> {};

/// Returns a map with environment pairs 'key-value'.
/// \->m[s]
environ = \-> {};

/// Finalizes immediately the program with 'code'.
///   code: Code of error. Usually [0-125] and 0 as 'without error' result.
/// \i -> ()
exit = \code -> {}

/// Set a function which will be called after 'sys.fail' and just
/// before of ending the current thread or program.
///   fn: A function which receives a string wose first line is the
///       message of 'sys.fail' and the others are the stack trace.
///       NOTE: This function replaces the default function.
/// \(\s->()) -> ()
ffail = \fn -> {};

/// Prints messages and ends the current thread or the total program if is
/// invocked in the main one.
/// \s -> ()
fail = \msg -> {};

/// Shows a text for console.
/// \s -> ()
print = \text -> {};

/// Shows a text followed by a carriage return for console.
/// \s -> ()
println = \text -> {};

/// Starts the random generator of numbers.
/// This functions must be called previously to use random functions.
/// \-> ()
rand = \-> {};

/// Reads a line on Console.
/// The '\n' byte is not read.
/// \-> s
readLine = \-> {};

/// Stop the current thread 'millis' milliseconds.
/// \i -> ()
sleep = \millis -> {};

/// Returns type of 'o'.
/// The type can be: "bool", "int", "float", "string", "array", "map",
/// "function", "module" or "object".
/// \* -> s
type = \o -> {};
