// Copyright 12-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Map functions.
///
/// Beside the functions described below, map also allows:
///
/// M["k"]: Returns the value of key 'k', equals to 'set'.
///           - If M does not have such key, a fail is raised.
/// M.k   : Equals to M[k], but using the symbol 'k' as string.

/// Returns a shallow copy of 'm'.
/// \m -> m
copy = \M -> {};

/// Creates a map from one array with pairs [key, value].
/// \[[s,*]...] -> m
fromArr = \A -> {};

/// Creates a map from one iterator with pairs [key, value].
/// \<iterator>[[s,*]...] -> m
fromIter = \it -> {};

/// Adds a new value 'v' with key 'k'. If 'v' is duplicate an error is raised.
/// \m, s, * -> ()
add = \M, k, v -> {};

/// Changes the value of key 'k' to 'v'. If 'k' does not exist an error is raised.
/// \m, s, * -> ()
set = \M, k, v -> {};

/// Adds a new value 'v' with key 'k' if such key does not exists. Otherwise
/// change the value of 'k' with 'v'.
/// \m, s, * -> ()
put = \M, k, v -> {};

/// Returns an array with the value for key 'k' or an empty array if it does
/// not exist.
/// \m, s -> [*]|[]
get = \M, k -> {};

/// Returns 'true' if 'M' has the key 'k'.
/// \m, s -> b
hasKey = \M, k -> {};

/// Returns keys of 'M'.
/// \m -> [s...]
keys = \M -> {};

/// Removes key 'k' from 'm' if it exists. Oterwise this function does nothing.
/// \m, s -> ()
remove = \M, k -> {};

/// Returns the entries number of 'M'.
/// \m -> i
size = \M -> {};

/// Returns an array with the pairs [key, value] of 'M'
/// |m -> [[s,*]...]
toArr = \M -> {};

/// Returns an iterator with the pairs [key, value] of 'M'
/// |m -> <iterator>[[s,*]...]
toIter = \M -> {};

/// Returns values of 'M'.
/// \m -> a
values = \M -> {};
